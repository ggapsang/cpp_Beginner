#include <stdio.h>
#include "func.h"
#include "common.h"

int main()
{
	g_iExtern;
	Add(3, 4);


	int i = Mul(10, 20);

	g_i = 100;

	// 포인터
	// visual studio - > solution -> project(프로그램의 실체) 
	// 솔루션 플랫폼 x64(64비트), x86(32비트)
	// 플랫폼 : 실행 기반

	// 포인터 변수
	// 포인터 : 주소를 가리키는 기능
	// 포인터 변수 : 포인터를 수행하는 변수

	int i = 100;
	int* pInt = &i; // 이 포인트는 아무것도 가리키지 않는다. &:i 변수의 주소를 찾는 연산자

	// 주소 : 메모리 공간 안에 공간의 위치를 구분적으로 구별하는 값

	*pInt = 200; // *주소로 접근한다 -> i 로 접근했다 -> i의 값은  100이다. -> i의 값을 200으로 바꾼다
	// 포인터형 방식은 정수표현 방식이다.
	// 주소의 단위. 100과 101의 차이는? 주소의 단위는 바이트 => 1바이트 차이 => 1바이트 4비트 (정수표현방식이므로 주소는 정수로 받는다)
	// int 포인터가 int만 잡는 이유 (자료형이 무엇인지 모르는 경우가 생겨서는 안 됨- 사이즈, 표현 방식 등의 문제)
	// 포인터 앞에 선언된 자료형의 의미는 해당 포인터에게 전달된 주소를 해석하는 단위(똑같은 비트체계를 정수로 볼 것이냐, 부동소수점으로 읽을 것이냐, 문자로 읽을 것이냐는 문제)
	// 단순히 메모리 공간의 사이즈의 문제가 아니다. 비트 단위에서 자료형마다 자료를 표현하는 방식이 다르고(정수형, 부동소수점)

	// 강제할당
	int j = 200;
	float f = 3.f;
	int* ptrJ = (int*)&f;

	return 0;
}
